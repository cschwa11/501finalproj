---
title: "final project 501"
author: "Daniel Vascones"
date: "12/14/2021"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:








```{r}
load(url("http://people.math.binghamton.edu/qiao/data501/data/movies.RData"))

movies$season <- factor(ifelse(movies$thtr_rel_month %in% c(12,1,2), "Winter",
                        ifelse(movies$thtr_rel_month %in% c(3,4,5), "Spring",
                              ifelse(movies$thtr_rel_month %in% c(6,7,8), "Summer",
                                     ifelse(movies$thtr_rel_month %in% c(9,10,11), "Fall",
                                            NA)))))
movies_alt2=movies
df2 = subset(movies_alt2, select = -c(imdb_num_votes, critics_rating, audience_rating, imdb_rating, critics_score, best_pic_nom, best_pic_win, top200_box, imdb_url, rt_url, actor1, actor2, actor3, actor4, actor5, director, title, thtr_rel_month, thtr_rel_day,dvd_rel_month,dvd_rel_day, studio, dvd_rel_year))



df2= na.omit(df2)
set.seed(1234)

index2 = sample(c(rep(TRUE,450), rep(FALSE,200)))
SetA2=df2[index2, ]
SetB2=df2[!index2, ]



movies.lm.A2= lm(audience_score~. ,data=SetA2)
summary(movies.lm.A2)

```
```{r}
library(car)
outlierTest(movies.lm.A2)
```

```{r}
X2 = model.matrix(movies.lm.A2)[,-1]
R2 = cor(X2)
ev2 = eigen(R2)$val
sqrt(ev[1]*(ev2)^(-1))

library(faraway)
faraway::vif(X2)
```

## 


```{r}
movies.rm.A2=lm(audience_score~. -mpaa_rating, data=SetA2)
summary(movies.rm.A2)


X.rm2 = model.matrix(movies.rm.A2)[,-1]
R.rm2 = cor(X.rm2)
ev.rm2 = eigen(R.rm2)$val
sqrt(ev.rm2[1]*(ev.rm2)^(-1))

library(faraway)
faraway::vif(X.rm2)


#movies.scale.X = scale(model.frame(movies.lm.A)[,-1])
#PCA = princomp(movies.scale.X, cor=TRUE)
#PCA$loadings  #loading matrix
#summary(PCA)  # variance
library(car)
outlierTest(movies.rm.A2)

```


```{r}
#plot(movies.rm.A2)

par(mfrow = c(2,2))

car::crPlots(movies.rm.A2)
```
```{r}

MASS::boxcox(movies.rm.A2)
MASS::boxcox(movies.rm.A2, plotit=T, lambda= seq(1.1,1.8, by=0.1))

movies.rml.A2<- lm(audience_score^(1.4)~. -mpaa_rating, data=SetA2)

```


```{r}
mse.ols2 = mean((SetB2$audience_score - (predict(movies.rml.A2, SetB2))^(1/1.4))^2, na.rm=T)
sqrt(mse.ols2)
```

```{r}

forward_AIC2 = step(lm(audience_score^(1.4)~1, SetA2), list(upper = formula(movies.rml.A2)), 
                    direction = 'forward', k = 2, trace = F)
# 
formula(forward_AIC2)
```

```{r}
formula(movies.rml.A2)
```

best subset suggests to keep 

```{r}
library(leaps)
design.A2 = model.matrix(movies.rml.A2)[,-1]
best_subset2 = leaps(design.A2, SetA2$audience_score, method = 'Cp',nbest = 1)
plot(best_subset2$size, best_subset2$Cp)
(indcp=which.min(best_subset2$Cp))
best.model.Cp2 = best_subset2$which[indcp,]
best.model.Cp2
```

```{r}
forward_AIC2 = step(lm(audience_score^(1.4)~1, SetA2), list(upper = formula(movies.rml.A2)), 
                    direction = 'forward', k = 2, trace = F)

backward_AIC2 = step(movies.rml.A2, list(lower= ~1), direction = 'backward', trace = F)

# 
forward_BIC2 = step(lm(audience_score^(1.4)~1, SetA2), list(upper = formula(movies.rml.A2)), 
                    direction = 'forward', k = log(nrow(design.A2)), trace = F)


backward_BIC2 = step(movies.rml.A2,list(lower= ~1), direction = 'backward', k=log(nrow(design.A2)), trace = F)
# 
both_BIC2 = step(lm(audience_score^(1.4)~1, SetA2), list(upper = formula(movies.rml.A2), lower= ~ 1), 
                    direction = 'both', k = log(nrow(design.A2)), trace = F)
```

```{r}


#MSE foward AIC
mse_F_AIC= mean((SetB2$audience_score -(predict(forward_AIC2, SetB2))^(1/1.4))^2)
sqrt(mse_F_AIC)
#MSE_B_AIC
mse_B_AIC= mean((SetB2$audience_score -(predict(backward_AIC2, SetB2))^(1/1.4))^2)
sqrt(mse_B_AIC)
#foward BIC MSE
mse_F_BIC= mean((SetB2$audience_score -(predict(forward_BIC2, SetB2))^(1/1.4))^2)
sqrt(mse_F_BIC)
#backward BIC
mse_B_BIC= mean((SetB2$audience_score - (predict(backward_BIC2, SetB2))^(1/1.4))^2)
sqrt(mse_B_BIC)
#both
mse_both_BIC2= mean((SetB2$audience_score - (predict(both_BIC2, SetB2))^(1/1.4))^2)
sqrt(mse_both_BIC2)
```

```{r}
#formula(forward_AIC2)

#formula(backward_AIC2)
 formula(forward_BIC2)
 #formula(backward_BIC2)
 #formula(both_BIC2)
coef(forward_BIC2)
#summary(forward_BIC2)
```
```{r}
plot(forward_BIC2)
```

```{r}
#prediction
newdata=data.frame(genre='Drama', best_dir_win='yes', thtr_rel_year= 2021)
predict(forward_BIC2, newdata)^(1/1.4)

newdata=data.frame(genre='Action & Adventure', best_dir_win='yes', thtr_rel_year= 2021)
predict(forward_BIC2, newdata)^(1/1.4)
```





Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
